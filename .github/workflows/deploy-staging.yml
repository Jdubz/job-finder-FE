name: Deploy to Staging

on:
  push:
    branches:
      - staging
  workflow_dispatch:
    inputs:
      skip-tests:
        description: 'Skip tests (use with caution)'
        required: false
        default: 'false'

env:
  NODE_VERSION: '20'
  FIREBASE_PROJECT_ID: 'static-sites-257923'

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        if: github.event.inputs.skip-tests != 'true'
        run: npm test

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: quality-checks
    environment:
      name: staging
      url: https://job-finder-staging.web.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Copy staging environment file
        run: cp .env.staging .env

      - name: Build application for staging
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify build output
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.html" ]; then
            echo "Error: index.html not found in dist"
            exit 1
          fi
          echo "Build verification successful"
          echo "Build size:"
          du -sh dist

      - name: Deploy to Firebase Hosting (Staging)
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: live
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          target: staging

      - name: Verify deployment
        run: |
          echo "Waiting 10 seconds for deployment to propagate..."
          sleep 10
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://job-finder-staging.web.app)
          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Staging site is accessible (HTTP $HTTP_CODE)"
          else
            echo "⚠️ Warning: Staging site returned HTTP $HTTP_CODE"
            exit 1
          fi

      - name: Test Cloud Functions connectivity
        run: |
          echo "Testing staging Cloud Functions endpoints..."
          FUNCTIONS=(
            "manageJobQueue-staging"
            "manageGenerator-staging"
            "manageExperience-staging"
            "manageContentItems-staging"
            "contact-form-staging"
          )
          
          FAILED=0
          for func in "${FUNCTIONS[@]}"; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://us-central1-static-sites-257923.cloudfunctions.net/$func")
            if [ "$HTTP_CODE" = "401" ] || [ "$HTTP_CODE" = "200" ]; then
              echo "✅ $func: HTTP $HTTP_CODE (OK)"
            else
              echo "❌ $func: HTTP $HTTP_CODE (FAILED)"
              FAILED=1
            fi
          done
          
          if [ $FAILED -eq 1 ]; then
            echo "⚠️ Some Cloud Functions are not accessible"
            exit 1
          else
            echo "✅ All Cloud Functions are accessible"
          fi

      - name: Deployment summary
        if: always()
        run: |
          echo "## Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://job-finder-staging.web.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ env.FIREBASE_PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
